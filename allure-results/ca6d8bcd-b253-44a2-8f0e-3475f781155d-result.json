{"name": "Поиск книги по автору", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('xpath', './/*[text()[contains(normalize-space(.), concat(\"\", \"Лем С.\"))]]')).is visible\n\nReason: InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x559065a8c013 <unknown>\n#1 0x5590657ee89f <unknown>\n#2 0x559065817a1b <unknown>\n#3 0x5590658428ac <unknown>\n#4 0x559065840591 <unknown>\n#5 0x55906583fdc7 <unknown>\n#6 0x5590657c5c54 <unknown>\n#7 0x5590657c6aa0 <unknown>\n#8 0x559065ab9e5d <unknown>\n#9 0x559065ad3061 <unknown>\n#10 0x559065abbbb5 <unknown>\n#11 0x559065ad3e08 <unknown>\n#12 0x559065aaf2f0 <unknown>\n#13 0x5590657c57d2 <unknown>\n#14 0x7fdefd9d90b3 <unknown>", "trace": "self = <selene.core.wait.Wait object at 0x000001EF974A3B20>, fn = <selene.core.conditions.ElementCondition object at 0x000001EF959A84C0>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\nvenv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.conditions.ElementCondition object at 0x000001EF959A84C0>, entity = <selene.core.entity.Element object at 0x000001EF974A3A00>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\nvenv\\lib\\site-packages\\selene\\core\\condition.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nentity = <selene.core.entity.Element object at 0x000001EF974A3A00>\n\n    def fn(entity: E) -> None:\n>       if not predicate(entity):\n\nvenv\\lib\\site-packages\\selene\\core\\condition.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <selene.core.entity.Element object at 0x000001EF974A3A00>\n\n>       'is visible', lambda element: element().is_displayed()\n    )\n\nvenv\\lib\\site-packages\\selene\\core\\match.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.entity.Element object at 0x000001EF974A3A00>\n\n    def __call__(self) -> WebElement:\n>       return self._locator()\n\nvenv\\lib\\site-packages\\selene\\core\\entity.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.locator.Locator object at 0x000001EF974A3A60>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\nvenv\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>           f'{self}.element({by})', lambda: self.driver.find_element(*by)\n        ),\n        self.config,\n    )\n\nvenv\\lib\\site-packages\\selene\\core\\entity.py:1540: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"eebef9e67244db9b32e4d23259fa3c8d\")>, by = 'xpath'\nvalue = './/*[text()[contains(normalize-space(.), concat(\"\", \"Лем С.\"))]]'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:740: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"eebef9e67244db9b32e4d23259fa3c8d\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': './/*[text()[contains(normalize-space(.), concat(\"\", \"Лем С.\"))]]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EF974A2DD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x559...\\\\n#12 0x559065aaf2f0 \\\\u003Cunknown>\\\\n#13 0x5590657c57d2 \\\\u003Cunknown>\\\\n#14 0x7fdefd9d90b3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x559065a8c013 <unknown>\nE       #1 0x5590657ee89f <unknown>\nE       #2 0x559065817a1b <unknown>\nE       #3 0x5590658428ac <unknown>\nE       #4 0x559065840591 <unknown>\nE       #5 0x55906583fdc7 <unknown>\nE       #6 0x5590657c5c54 <unknown>\nE       #7 0x5590657c6aa0 <unknown>\nE       #8 0x559065ab9e5d <unknown>\nE       #9 0x559065ad3061 <unknown>\nE       #10 0x559065abbbb5 <unknown>\nE       #11 0x559065ad3e08 <unknown>\nE       #12 0x559065aaf2f0 <unknown>\nE       #13 0x5590657c57d2 <unknown>\nE       #14 0x7fdefd9d90b3 <unknown>\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selene.core.entity.Browser object at 0x000001EF974A3760>\n\n    @allure.title(\"Поиск книги по автору\")\n    def test_product_search(setup_browser):\n        browser = setup_browser\n        browser.driver.set_window_size(1920, 1200)\n    \n        with allure.step(\"Открываем главную страницу\"):\n            browser.open(\"https://www.dom-knigi.ru/\")\n    \n        with allure.step(\"Ищем книгу по автору \"):\n            browser.element('[name=\"q\"]').send_keys('Лем С.')\n            browser.element('[name=\"q\"]').submit()\n    \n        with allure.step(\"Проверяем нличие книги автор которой Лен С.\"):\n>           browser.element(by.partial_text('Лем С.')).should (be.visible)\n\ntests\\test_product_search.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selene\\core\\entity.py:539: in should\n    super().should(condition)\nvenv\\lib\\site-packages\\selene\\core\\entity.py:126: in should\n    self.wait.for_(condition)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.wait.Wait object at 0x000001EF974A3B20>, fn = <selene.core.conditions.ElementCondition object at 0x000001EF959A84C0>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 4s, while waiting for:\nE                       browser.element(('xpath', './/*[text()[contains(normalize-space(.), concat(\"\", \"Лем С.\"))]]')).is visible\nE                       \nE                       Reason: InvalidSessionIdException: Message: invalid session id\nE                       Stacktrace:\nE                       #0 0x559065a8c013 <unknown>\nE                       #1 0x5590657ee89f <unknown>\nE                       #2 0x559065817a1b <unknown>\nE                       #3 0x5590658428ac <unknown>\nE                       #4 0x559065840591 <unknown>\nE                       #5 0x55906583fdc7 <unknown>\nE                       #6 0x5590657c5c54 <unknown>\nE                       #7 0x5590657c6aa0 <unknown>\nE                       #8 0x559065ab9e5d <unknown>\nE                       #9 0x559065ad3061 <unknown>\nE                       #10 0x559065abbbb5 <unknown>\nE                       #11 0x559065ad3e08 <unknown>\nE                       #12 0x559065aaf2f0 <unknown>\nE                       #13 0x5590657c57d2 <unknown>\nE                       #14 0x7fdefd9d90b3 <unknown>\n\nvenv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException"}, "steps": [{"name": "Открываем главную страницу", "status": "passed", "start": 1688139230452, "stop": 1688139232358}, {"name": "Ищем книгу по автору ", "status": "passed", "start": 1688139232358, "stop": 1688139235331}, {"name": "Проверяем нличие книги автор которой Лен С.", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('xpath', './/*[text()[contains(normalize-space(.), concat(\"\", \"Лем С.\"))]]')).is visible\n\nReason: InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x559065a8c013 <unknown>\n#1 0x5590657ee89f <unknown>\n#2 0x559065817a1b <unknown>\n#3 0x5590658428ac <unknown>\n#4 0x559065840591 <unknown>\n#5 0x55906583fdc7 <unknown>\n#6 0x5590657c5c54 <unknown>\n#7 0x5590657c6aa0 <unknown>\n#8 0x559065ab9e5d <unknown>\n#9 0x559065ad3061 <unknown>\n#10 0x559065abbbb5 <unknown>\n#11 0x559065ad3e08 <unknown>\n#12 0x559065aaf2f0 <unknown>\n#13 0x5590657c57d2 <unknown>\n#14 0x7fdefd9d90b3 <unknown>\n\n\n", "trace": "  File \"C:\\Users\\Хозяин\\PycharmProjects\\HW\\tests\\test_product_search.py\", line 18, in test_product_search\n    browser.element(by.partial_text('Лем С.')).should (be.visible)\n  File \"C:\\Users\\Хозяин\\PycharmProjects\\HW\\venv\\lib\\site-packages\\selene\\core\\entity.py\", line 539, in should\n    super().should(condition)\n  File \"C:\\Users\\Хозяин\\PycharmProjects\\HW\\venv\\lib\\site-packages\\selene\\core\\entity.py\", line 126, in should\n    self.wait.for_(condition)\n  File \"C:\\Users\\Хозяин\\PycharmProjects\\HW\\venv\\lib\\site-packages\\selene\\core\\wait.py\", line 125, in for_\n    raise self._hook_failure(failure)\n"}, "start": 1688139235331, "stop": 1688139239369}], "start": 1688139230228, "stop": 1688139239441, "uuid": "ee2d9641-b296-4d50-a4ed-d84d0e485fc4", "historyId": "1a59ed8407de2015c4b998492a2f01fe", "testCaseId": "e9754cb8ec5cc976fd17dfad65b68d7c", "fullName": "tests.test_product_search#test_product_search", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_product_search"}, {"name": "host", "value": "myPrecious"}, {"name": "thread", "value": "504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_product_search"}]}